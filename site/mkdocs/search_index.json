{
    "docs": [
        {
            "location": "/", 
            "text": "Getting Started with Jekyll Academic\n\n\nRequired Software\n\n\nIn order to edit your Jekyll Academic website you will need the following pieces of software:\n\n\n1) A text editor. Any text editor will do, our favorite is \nAtom\n\n\n2) \nGitHub Desktop\n. This is used to sync files between your local computer and the GitHub repository that is acting as your website host.\n\n\nQuickstart Guide\n\n\nThis quickstart guide is geared to getting you up and running quickly. Following the directions below will result in you having a Jekyll Academic website hosted on GitHub pages live on the web. Before you begin working through the quickstart guide you may want to familiarize yourself with the following technologies that will be used to create your Jekyll Academic website:\n\n\n\n\nJekyll\n\n\nMarkdown\n\n\nGitHub\n\n\nGitHub Pages\n\n\n\n\n\n\n1) Register for a GitHub Account\n\n\nSkip this step if you have already setup your GitHub account\n\n\n\n\nIn a web browser, navigate to GitHub.com\n\n\nFill Out Username, Email Address and Password\n\n\nClick Sign up for GitHub button\n\n\nClick the Finish Sign Up button\n\n\nNavigate to the email account you used to sign up\n\n\nVerify your email address by clicking on the \u201cVerify email address\u201d button in the email you received from GitHub\n\n\n\n\n2) Setting Up your Jekyll Academic Repository:\n\n\n\n\nAfter signing in to GitHub click on New Repository\n\n\nGive your repository the following name [username].github.io (username is the username of your account)\n\n\nClick on Create Repository\n\n\nClick on Import Code\n\n\nPaste the following URL in the \u201cYour old repository\u2019s clone URL - https://github.com/NCSU-Libraries/jekyll-academic\n\n\nClick on Begin Import\n\n\nOnce import is complete navigate to [username.github.io] in your web browser\n\n\n\n\n3) Connect your GitHub Repository to GitHub Desktop\n\n\n\n\nDownload GitHub Desktop from https://desktop.github.com/ (skip this step if you already have GitHub Desktop installed)\n\n\nDouble-click on downloaded file to begin the installation\n\n\nWhile on the Welcome screen click on Continue\n\n\nSign in using the username you created in step one of this activity\n\n\nClick Sign In\n\n\nClick Continue\n\n\nClick Continue one more time\n\n\nClick on the plus sign in the upper left-hand corner of the screen to add a repository to Github Desktop\n\n\nClick Clone\n\n\nFind the \u2018[username].github.io\u2019 repository you created earlier and click Clone Repository\n\n\nSelect the location where you would like to save the repository (e.g. Documents)\n\n\nOnce the clone is finished you can click on the name of the repository on the left-hand side of Github Desktop to see any uncommitted changes (there shouldn\u2019t be any yet)\n\n\n\n\n4) Update Website _config.yml File and Sync Changes\n\n\n\n\nSee your live Website by opening your web browser and going to [username].github.io\n\n\nOpen _config.yml using Atom\n\n\nEdit the following entries of the _config.yml file\n\n\nTitle\n\n\nName\n\n\nBio\n\n\nEmail\n\n\nTwitter\n\n\nFacebook\n\n\nGitHub\n\n\nSave the _config.yml file\n\n\nCommit Changes to GitHub Repo\n\n\nOpen GitHub Desktop\n\n\nClick to see Uncommitted Changes (at the top center portion of the screen)\n\n\nAdd commit message to the summary field that says what changes you made\n\n\nClick Commit to Master\n\n\nClick Sync\n\n\nRefresh the browser window with your website and note the changes\n\n\n\n\nImportant Files and Folders\n\n\nIn order to better understand how everything in your site works, there are a few files and folders that you need to be aware of. These files control the main elements of your site, including your logo, bio photo and navigation. Full documentation of the directory structure can be found \nhere\n. \n\n\n\n\n\n\n_config.yml\n - This is your websites main configuration file. It allows you to set a site title, links to your social media accounts as well as a logo and bio photo image.\n\n\n\n\n\n\naccent.scss\n - This file is used to set the colors of your site. The site is set up to accept two colors (highlight, lowlight). The main impact of the color choice  \n\n\n\n\n\n\n_posts\n - This folder holds all of the posts for your website. It includes both blog posts as well as presentation posts. There are two sample posts in this directory to get your started. One for a blog post and one for a presentation post.\n\n\n\n\n\n\nimages/bio-photo.jpg\n - This is the photo that appears on the home page of the website. The recommended image size is 200px x 200px.\n\n\n\n\n\n\nimages/logo.png\n - If you wish to use a logo for your site, include logo.png in the images folder. You will also need to add logo.png under the 'Logo:' section of the _config.yml file.\n\n\n\n\n\n\n_data/navigation.yml\n -This is the file that allows you to manage your navigation elements. By default all available navigation items are shown. If you wish to hide any items, simply delete them from this file.\n\n\n\n\n\n\nAdding Blog posts\n\n\nTo add a new blog post to your site you simply create a new Markdown file. Jekyll requires that you follow the yyyy-mm-dd-title.md naming convention. Once you have the blank Markdown file you will need to add the header information so that Jekyll knows it is a blog file. Add the following to the top of your Markdown file:\n      ---\n      layout: post\n      title: Add Your Title Here\n      excerpt: \"Add an excerpt here, the excerpt will appear underneath the blog title\"\n      modified: 2016-01-13 20:41:38\n      tags: [intro, beginner, jekyll, tutorial]\n      comments: true\n      category: blog\n      ---\n      # Start your content here\nThe important thing to note is that you need to make sure that the category is set to 'blog'. This ensures that this post will appear on the blog page. You can then add your blog content using Markdown as your markup language for the rest of the file.\n\n\nAdding Presentations\n\n\nIn Jekyll Academic presentations are actually set up as posts, just with a few different settings in the header. This means that your presentation files live in the same _posts folder as your blog posts. The only differences between presentations and posts is the layout and category section in the header.\n\n\nAdding Reveal.js Presentations\n\n\nTo add a Reveal.js presentation to your site you first will need to create a new Markdown file in your _posts folder. At the top of your new file you will want to add the following header. Notice that you need to set the layout to 'slide' and the category to 'presentation'\n\n\n  ---\n  layout: slide\n  title: Add Your Title Here\n  excerpt: \"Add an excerpt here, the excerpt will appear underneath the blog title\"\n  modified: 2016-01-13 20:41:38\n  tags: [intro, beginner, jekyll, tutorial]\n  comments: true\n  category: presentation\n  ---\n  \nsection data-markdown\n\n  # Add reveal.js slide content here, following the reveal.js format\n  \n/section\n\n\n\n\nLinking to External Presentations\n\n\nTo add a presentation post that appears on the presentation page, but is not a reveal.js slide deck you follow similar instructions as above. You will create a new Markdown file in your _posts folder and add the following header to it. Notice that you keep 'post' as the layout and 'presentation' as the category. This will create a blog post style post where you can link to external presentations.\n\n\n  ---\n  layout: post\n  title: Add Your Title Here\n  excerpt: \"Add an excerpt here, the excerpt will appear underneath the blog title\"\n  modified: 2016-01-13 20:41:38\n  tags: [intro, beginner, jekyll, tutorial]\n  comments: true\n  category: presentation\n  ---", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#getting-started-with-jekyll-academic", 
            "text": "", 
            "title": "Getting Started with Jekyll Academic"
        }, 
        {
            "location": "/#required-software", 
            "text": "In order to edit your Jekyll Academic website you will need the following pieces of software:  1) A text editor. Any text editor will do, our favorite is  Atom  2)  GitHub Desktop . This is used to sync files between your local computer and the GitHub repository that is acting as your website host.", 
            "title": "Required Software"
        }, 
        {
            "location": "/#quickstart-guide", 
            "text": "This quickstart guide is geared to getting you up and running quickly. Following the directions below will result in you having a Jekyll Academic website hosted on GitHub pages live on the web. Before you begin working through the quickstart guide you may want to familiarize yourself with the following technologies that will be used to create your Jekyll Academic website:   Jekyll  Markdown  GitHub  GitHub Pages", 
            "title": "Quickstart Guide"
        }, 
        {
            "location": "/#1-register-for-a-github-account", 
            "text": "Skip this step if you have already setup your GitHub account   In a web browser, navigate to GitHub.com  Fill Out Username, Email Address and Password  Click Sign up for GitHub button  Click the Finish Sign Up button  Navigate to the email account you used to sign up  Verify your email address by clicking on the \u201cVerify email address\u201d button in the email you received from GitHub", 
            "title": "1) Register for a GitHub Account"
        }, 
        {
            "location": "/#2-setting-up-your-jekyll-academic-repository", 
            "text": "After signing in to GitHub click on New Repository  Give your repository the following name [username].github.io (username is the username of your account)  Click on Create Repository  Click on Import Code  Paste the following URL in the \u201cYour old repository\u2019s clone URL - https://github.com/NCSU-Libraries/jekyll-academic  Click on Begin Import  Once import is complete navigate to [username.github.io] in your web browser", 
            "title": "2) Setting Up your Jekyll Academic Repository:"
        }, 
        {
            "location": "/#3-connect-your-github-repository-to-github-desktop", 
            "text": "Download GitHub Desktop from https://desktop.github.com/ (skip this step if you already have GitHub Desktop installed)  Double-click on downloaded file to begin the installation  While on the Welcome screen click on Continue  Sign in using the username you created in step one of this activity  Click Sign In  Click Continue  Click Continue one more time  Click on the plus sign in the upper left-hand corner of the screen to add a repository to Github Desktop  Click Clone  Find the \u2018[username].github.io\u2019 repository you created earlier and click Clone Repository  Select the location where you would like to save the repository (e.g. Documents)  Once the clone is finished you can click on the name of the repository on the left-hand side of Github Desktop to see any uncommitted changes (there shouldn\u2019t be any yet)", 
            "title": "3) Connect your GitHub Repository to GitHub Desktop"
        }, 
        {
            "location": "/#4-update-website-95configyml-file-and-sync-changes", 
            "text": "See your live Website by opening your web browser and going to [username].github.io  Open _config.yml using Atom  Edit the following entries of the _config.yml file  Title  Name  Bio  Email  Twitter  Facebook  GitHub  Save the _config.yml file  Commit Changes to GitHub Repo  Open GitHub Desktop  Click to see Uncommitted Changes (at the top center portion of the screen)  Add commit message to the summary field that says what changes you made  Click Commit to Master  Click Sync  Refresh the browser window with your website and note the changes", 
            "title": "4) Update Website _config.yml File and Sync Changes"
        }, 
        {
            "location": "/#important-files-and-folders", 
            "text": "In order to better understand how everything in your site works, there are a few files and folders that you need to be aware of. These files control the main elements of your site, including your logo, bio photo and navigation. Full documentation of the directory structure can be found  here .     _config.yml  - This is your websites main configuration file. It allows you to set a site title, links to your social media accounts as well as a logo and bio photo image.    accent.scss  - This file is used to set the colors of your site. The site is set up to accept two colors (highlight, lowlight). The main impact of the color choice      _posts  - This folder holds all of the posts for your website. It includes both blog posts as well as presentation posts. There are two sample posts in this directory to get your started. One for a blog post and one for a presentation post.    images/bio-photo.jpg  - This is the photo that appears on the home page of the website. The recommended image size is 200px x 200px.    images/logo.png  - If you wish to use a logo for your site, include logo.png in the images folder. You will also need to add logo.png under the 'Logo:' section of the _config.yml file.    _data/navigation.yml  -This is the file that allows you to manage your navigation elements. By default all available navigation items are shown. If you wish to hide any items, simply delete them from this file.", 
            "title": "Important Files and Folders"
        }, 
        {
            "location": "/#adding-blog-posts", 
            "text": "To add a new blog post to your site you simply create a new Markdown file. Jekyll requires that you follow the yyyy-mm-dd-title.md naming convention. Once you have the blank Markdown file you will need to add the header information so that Jekyll knows it is a blog file. Add the following to the top of your Markdown file:\n      ---\n      layout: post\n      title: Add Your Title Here\n      excerpt: \"Add an excerpt here, the excerpt will appear underneath the blog title\"\n      modified: 2016-01-13 20:41:38\n      tags: [intro, beginner, jekyll, tutorial]\n      comments: true\n      category: blog\n      ---\n      # Start your content here\nThe important thing to note is that you need to make sure that the category is set to 'blog'. This ensures that this post will appear on the blog page. You can then add your blog content using Markdown as your markup language for the rest of the file.", 
            "title": "Adding Blog posts"
        }, 
        {
            "location": "/#adding-presentations", 
            "text": "In Jekyll Academic presentations are actually set up as posts, just with a few different settings in the header. This means that your presentation files live in the same _posts folder as your blog posts. The only differences between presentations and posts is the layout and category section in the header.", 
            "title": "Adding Presentations"
        }, 
        {
            "location": "/#adding-revealjs-presentations", 
            "text": "To add a Reveal.js presentation to your site you first will need to create a new Markdown file in your _posts folder. At the top of your new file you will want to add the following header. Notice that you need to set the layout to 'slide' and the category to 'presentation'    ---\n  layout: slide\n  title: Add Your Title Here\n  excerpt: \"Add an excerpt here, the excerpt will appear underneath the blog title\"\n  modified: 2016-01-13 20:41:38\n  tags: [intro, beginner, jekyll, tutorial]\n  comments: true\n  category: presentation\n  ---\n   section data-markdown \n  # Add reveal.js slide content here, following the reveal.js format\n   /section", 
            "title": "Adding Reveal.js Presentations"
        }, 
        {
            "location": "/#linking-to-external-presentations", 
            "text": "To add a presentation post that appears on the presentation page, but is not a reveal.js slide deck you follow similar instructions as above. You will create a new Markdown file in your _posts folder and add the following header to it. Notice that you keep 'post' as the layout and 'presentation' as the category. This will create a blog post style post where you can link to external presentations.    ---\n  layout: post\n  title: Add Your Title Here\n  excerpt: \"Add an excerpt here, the excerpt will appear underneath the blog title\"\n  modified: 2016-01-13 20:41:38\n  tags: [intro, beginner, jekyll, tutorial]\n  comments: true\n  category: presentation\n  ---", 
            "title": "Linking to External Presentations"
        }, 
        {
            "location": "/advanced/", 
            "text": "Advanced Features\n\n\nThe quickstart guide was intended to provide you with the easiest possible setup of Jekyll Academic. The integration with GitHub Pages allows you to fully set up Jekyll Academic without ever installing Jekyll locally. However, many users may wish to make advanced modifications to their site. If you wish to do so, you would benefit from installing Jekyll locally. The following instructions are based on using Mac OSX as your operating system.\n\n\nSetting Up Jekyll Locally\n\n\nGitHub Pages has been designed to work with Jekyll allowing you to upload your 'raw' site files and have GitHub interpret them and create your site. This works well for any user that wants to use GitHub Pages. However, there are additional features that can be utilized if you wish to install Jekyll locally. Local installation allows you to preview the changes made to your site without committing them to GitHub. It also allows you to create new posts from the command line.\n\n\nTo set up Jekyll locally you will need to install the following three things:\n\n\n\n\nRuby\n\n\nRubyGems\n\n\nJekyll\n\n\n\n\nInstalling Ruby\n\n\nProbably the easiest way to install Ruby on a Mac is using \nHomebrew\n. Once you have Homebrew installed you can install ruby using the command \nbrew install ruby\n. If you are using another operating system, or wish to have a more advanced ruby setup, you may find the instructions listed \nhere\n useful. After installing ruby on your system you will need to install \nRubyGems\n this can be completed by following the instructions on the \nRubyGems\n website.\n\n\nInstalling Jekyll\n\n\nJekyll can be installed using RubyGems once you have ruby and RubyGems installed you can install Jekyll using the command \ngem install jekyll\n.\n\n\nUsing Jekyll Locally\n\n\nJekyll is an incredibly powerful tool. It also has a ton of great documentation written about it already that can be found at the \nJekyll\n website. We highly recommend you take a look at that site to get a better idea of the advanced features that are available. Two of the most common Jekyll commands are described below.\n\n\n\n\n\n\nJekyll Serve\n - The primary advantage of installing Jekyll locally is that it allows you to make updates to your site and preview those changes before pushing them to GitHub. In order to view changes that you are making to your site in a preview development server run \njekyll serve\n from your project directory and then navigate to http://localhost:4000/.\n\n\n\n\n\n\nJekyll Build\n - If you wish to host your website somewhere other than GitHub Pages it will require that you create a site folder containing valid HTML and CSS files. You can do this by running \njekyll build\n from the root folder of your project directory. That will result in the creation of a _site folder. That folder can then be uploaded to the webhost of your choosing.\n\n\n\n\n\n\nAdding Navigation Items\n\n\nYou may want to add additional navigation items that point to different types of content or individual pages. This can be accomplished by adding a new navigation item. In order to add a new navigation item you will:\n\n\n1) Copy the folder of an existing navigation item (e.g resume) and paste it into the root directory of your project. Rename this folder with the name of the new navigation item.\n\n\n2) Navigate to _data/navigation.yml and add a new navigation item by copying the layout of an existing navigation item.\n\n\n3) Take a look at some of the existing index.md files for other navigation items. Take note of the 'layout' element declared in the frontmatter. This will help you determine which layout is appropriate for your newly created page (e.g. Page or Resume)\n\n\nUnderstanding Layouts\n\n\nOne of the fundamental elements of Jekyll is the ability to utilize different layouts for different types of pages. The layouts are found in the _layouts folder. These are .html files that drive the layout of any particular page. For example the 'slide' layout contains all of the necessary includes to power reveal.js slides. The current available layouts in Jekyll Academic are:\n\n\n\n\nhome\n - This layout is the layout for the homepage of your website. It automatically includes your 5 most recent blog posts in the space to the right of the social media section.\n\n\npage\n -  This layout is used for any individual page, like the 'About Me' page. It is a blank page that can be formatted using Markdown.\n\n\npost-index\n -  This layout is used on the blog archive. It lists every blog post chronologically separated by year.\n\n\npost\n - This layout is used for blog posts. It includes a few more functionality elements than the 'page' layout.\n\n\nresume\n -  This layout is used for the Resume page.\n\n\npresentation-post-index\n - This layout is identical to the post-index layout except it is used on the presentations index to post all presentations you have on your site in one location, chronologically.\n\n\nslide\n -  This layout is used for creating a reveal.js slide deck.", 
            "title": "Advanced Features"
        }, 
        {
            "location": "/advanced/#advanced-features", 
            "text": "The quickstart guide was intended to provide you with the easiest possible setup of Jekyll Academic. The integration with GitHub Pages allows you to fully set up Jekyll Academic without ever installing Jekyll locally. However, many users may wish to make advanced modifications to their site. If you wish to do so, you would benefit from installing Jekyll locally. The following instructions are based on using Mac OSX as your operating system.", 
            "title": "Advanced Features"
        }, 
        {
            "location": "/advanced/#setting-up-jekyll-locally", 
            "text": "GitHub Pages has been designed to work with Jekyll allowing you to upload your 'raw' site files and have GitHub interpret them and create your site. This works well for any user that wants to use GitHub Pages. However, there are additional features that can be utilized if you wish to install Jekyll locally. Local installation allows you to preview the changes made to your site without committing them to GitHub. It also allows you to create new posts from the command line.  To set up Jekyll locally you will need to install the following three things:   Ruby  RubyGems  Jekyll", 
            "title": "Setting Up Jekyll Locally"
        }, 
        {
            "location": "/advanced/#installing-ruby", 
            "text": "Probably the easiest way to install Ruby on a Mac is using  Homebrew . Once you have Homebrew installed you can install ruby using the command  brew install ruby . If you are using another operating system, or wish to have a more advanced ruby setup, you may find the instructions listed  here  useful. After installing ruby on your system you will need to install  RubyGems  this can be completed by following the instructions on the  RubyGems  website.", 
            "title": "Installing Ruby"
        }, 
        {
            "location": "/advanced/#installing-jekyll", 
            "text": "Jekyll can be installed using RubyGems once you have ruby and RubyGems installed you can install Jekyll using the command  gem install jekyll .", 
            "title": "Installing Jekyll"
        }, 
        {
            "location": "/advanced/#using-jekyll-locally", 
            "text": "Jekyll is an incredibly powerful tool. It also has a ton of great documentation written about it already that can be found at the  Jekyll  website. We highly recommend you take a look at that site to get a better idea of the advanced features that are available. Two of the most common Jekyll commands are described below.    Jekyll Serve  - The primary advantage of installing Jekyll locally is that it allows you to make updates to your site and preview those changes before pushing them to GitHub. In order to view changes that you are making to your site in a preview development server run  jekyll serve  from your project directory and then navigate to http://localhost:4000/.    Jekyll Build  - If you wish to host your website somewhere other than GitHub Pages it will require that you create a site folder containing valid HTML and CSS files. You can do this by running  jekyll build  from the root folder of your project directory. That will result in the creation of a _site folder. That folder can then be uploaded to the webhost of your choosing.", 
            "title": "Using Jekyll Locally"
        }, 
        {
            "location": "/advanced/#adding-navigation-items", 
            "text": "You may want to add additional navigation items that point to different types of content or individual pages. This can be accomplished by adding a new navigation item. In order to add a new navigation item you will:  1) Copy the folder of an existing navigation item (e.g resume) and paste it into the root directory of your project. Rename this folder with the name of the new navigation item.  2) Navigate to _data/navigation.yml and add a new navigation item by copying the layout of an existing navigation item.  3) Take a look at some of the existing index.md files for other navigation items. Take note of the 'layout' element declared in the frontmatter. This will help you determine which layout is appropriate for your newly created page (e.g. Page or Resume)", 
            "title": "Adding Navigation Items"
        }, 
        {
            "location": "/advanced/#understanding-layouts", 
            "text": "One of the fundamental elements of Jekyll is the ability to utilize different layouts for different types of pages. The layouts are found in the _layouts folder. These are .html files that drive the layout of any particular page. For example the 'slide' layout contains all of the necessary includes to power reveal.js slides. The current available layouts in Jekyll Academic are:   home  - This layout is the layout for the homepage of your website. It automatically includes your 5 most recent blog posts in the space to the right of the social media section.  page  -  This layout is used for any individual page, like the 'About Me' page. It is a blank page that can be formatted using Markdown.  post-index  -  This layout is used on the blog archive. It lists every blog post chronologically separated by year.  post  - This layout is used for blog posts. It includes a few more functionality elements than the 'page' layout.  resume  -  This layout is used for the Resume page.  presentation-post-index  - This layout is identical to the post-index layout except it is used on the presentations index to post all presentations you have on your site in one location, chronologically.  slide  -  This layout is used for creating a reveal.js slide deck.", 
            "title": "Understanding Layouts"
        }, 
        {
            "location": "/resources/", 
            "text": "Additional Resources\n\n\nJekyll\n\n\nJekyll describes itself as a 'Blog aware static website generator'. It is written in the Ruby programming language and is a very powerful tool that creates static websites. The Jekyll Academic theme and getting started guide is limited in its use of Jekyll features. We recommend visiting \nhttps://jekyllrb.com/\n to learn more about all of the features of Jekyll.\n\n\nMinimal Mistakes\n\n\nJekyll Academic is largely based on the \nMinimal Mistakes\n Jekyll theme developed by Michael Rose. This theme is highly customizable, responsive and completely free to use and modify. To learn more about the theme, as well as more in depth editing instructions please visit the \nMinimal Mistakes Getting Started Guide\n.\n\n\nMarkdown\n\n\nMarkdown is a lightweight yet powerful text markup language developed by John Gruber. To learn more about how to use Markdown please visit the Markdown Tutorial on his website.\n\n\nGitHub Pages\n\n\nGitHub Pages\n provides a free hosting platform for personal or project websites. It is tightly integrated with Jekyll to provide a seamless hosting solution for Jekyll based websites.", 
            "title": "Additional Resources"
        }, 
        {
            "location": "/resources/#additional-resources", 
            "text": "", 
            "title": "Additional Resources"
        }, 
        {
            "location": "/resources/#jekyll", 
            "text": "Jekyll describes itself as a 'Blog aware static website generator'. It is written in the Ruby programming language and is a very powerful tool that creates static websites. The Jekyll Academic theme and getting started guide is limited in its use of Jekyll features. We recommend visiting  https://jekyllrb.com/  to learn more about all of the features of Jekyll.", 
            "title": "Jekyll"
        }, 
        {
            "location": "/resources/#minimal-mistakes", 
            "text": "Jekyll Academic is largely based on the  Minimal Mistakes  Jekyll theme developed by Michael Rose. This theme is highly customizable, responsive and completely free to use and modify. To learn more about the theme, as well as more in depth editing instructions please visit the  Minimal Mistakes Getting Started Guide .", 
            "title": "Minimal Mistakes"
        }, 
        {
            "location": "/resources/#markdown", 
            "text": "Markdown is a lightweight yet powerful text markup language developed by John Gruber. To learn more about how to use Markdown please visit the Markdown Tutorial on his website.", 
            "title": "Markdown"
        }, 
        {
            "location": "/resources/#github-pages", 
            "text": "GitHub Pages  provides a free hosting platform for personal or project websites. It is tightly integrated with Jekyll to provide a seamless hosting solution for Jekyll based websites.", 
            "title": "GitHub Pages"
        }, 
        {
            "location": "/about/", 
            "text": "What Is Jekyll Academic\n\n\nJekyll Academic is a Jekyll template developed by NCSU Libraries tailored specifically for use within the academic community. It is a template for \nJekyll\n, a static website generator. It's features include the ability to create blog posts, a dedicated resume page, social media integration and the ability to create and host \nReveal.js\n presentations. It is also designed to be hosted on GitHub pages. Jekyll Academic allows you to create a well designed, functional and completely free website. Hosting on GitHub pages allows you to keep the website in one place, even if you move between institutions.\n\n\nWhat is a Static Website?\n\n\nStatic websites are websites that do not require a database to store and deliver content to site visitors. In some ways static websites are more similar to early websites in that they rely primarily upon HTML and CSS to serve rather simple content to visitors. However, do not let the simplicity imply that they are somehow inferior to a dynamic website option such as WordPress.\n\n\nStatic websites have many advantages over dynamic websites. They are relatively simple to maintain, fast to load and incredibly secure. By creating a website that is not overly reliant upon third party software platforms you remain in total control of your content. You know exactly where every file for the website is, and do not have to worry about your content becoming trapped in a proprietary system or database.\n\n\nWhat is a Static Website Generator?\n\n\nA static website generator is a tool that takes flat files and processes them into the necessary HTML and CSS files to become a website. In the case of Jekyll Academic the majority of the files are written using the Markdown markup language. It is a simplified text markup language that allows you to mimic the features of HTML without needing to know HTML. Jekll is built using the Ruby programming language, it can take the Markdown and sass files that are in the Jekyll Academic directory and process those files, creating a fully functioning website.\n\n\nIs This the Right Type of Site for Me?\n\n\nWhile there are many advantages of using a static website generator to create your professional academic website, it may not be the right tool for everyone. This type of website is best suited for websites consisting mainly of static text content. If you need a site that relies heavily on video and large image galleries this may not be the best option for you. If you are looking for a site to host a CV and showcase some presentations as well as some text based pages (blog or otherwise) it will likely suit your needs.", 
            "title": "About"
        }, 
        {
            "location": "/about/#what-is-jekyll-academic", 
            "text": "Jekyll Academic is a Jekyll template developed by NCSU Libraries tailored specifically for use within the academic community. It is a template for  Jekyll , a static website generator. It's features include the ability to create blog posts, a dedicated resume page, social media integration and the ability to create and host  Reveal.js  presentations. It is also designed to be hosted on GitHub pages. Jekyll Academic allows you to create a well designed, functional and completely free website. Hosting on GitHub pages allows you to keep the website in one place, even if you move between institutions.", 
            "title": "What Is Jekyll Academic"
        }, 
        {
            "location": "/about/#what-is-a-static-website", 
            "text": "Static websites are websites that do not require a database to store and deliver content to site visitors. In some ways static websites are more similar to early websites in that they rely primarily upon HTML and CSS to serve rather simple content to visitors. However, do not let the simplicity imply that they are somehow inferior to a dynamic website option such as WordPress.  Static websites have many advantages over dynamic websites. They are relatively simple to maintain, fast to load and incredibly secure. By creating a website that is not overly reliant upon third party software platforms you remain in total control of your content. You know exactly where every file for the website is, and do not have to worry about your content becoming trapped in a proprietary system or database.", 
            "title": "What is a Static Website?"
        }, 
        {
            "location": "/about/#what-is-a-static-website-generator", 
            "text": "A static website generator is a tool that takes flat files and processes them into the necessary HTML and CSS files to become a website. In the case of Jekyll Academic the majority of the files are written using the Markdown markup language. It is a simplified text markup language that allows you to mimic the features of HTML without needing to know HTML. Jekll is built using the Ruby programming language, it can take the Markdown and sass files that are in the Jekyll Academic directory and process those files, creating a fully functioning website.", 
            "title": "What is a Static Website Generator?"
        }, 
        {
            "location": "/about/#is-this-the-right-type-of-site-for-me", 
            "text": "While there are many advantages of using a static website generator to create your professional academic website, it may not be the right tool for everyone. This type of website is best suited for websites consisting mainly of static text content. If you need a site that relies heavily on video and large image galleries this may not be the best option for you. If you are looking for a site to host a CV and showcase some presentations as well as some text based pages (blog or otherwise) it will likely suit your needs.", 
            "title": "Is This the Right Type of Site for Me?"
        }
    ]
}