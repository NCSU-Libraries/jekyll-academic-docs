{
    "docs": [
        {
            "location": "/about/", 
            "text": "What Is Jekyll Academic\n\n\nJekyll Academic is a Jekyll template developed by NCSU Libraries tailored specifically for use within the academic community. It is a template for \nJekyll\n, a static website generator. It's features include the ability to create blog posts, a dedicated resume page, social media integration and the ability to create and host \nReveal.js\n presentations. It is also designed to be hosted on GitHub pages. Jekyll Academic allows you to create a well designed, functional and completely free website. Hosting on GitHub pages allows you to keep the website in one place, even if you move between institutions.\n\n\nWhat is a Static Website?\n\n\nStatic websites are websites that do not require a database to store and deliver content to site visitors. In some ways static websites are more similar to early websites in that they rely primarily upon HTML and CSS to serve rather simple content to visitors. However, do not let the simplicity imply that they are somehow inferior to a dynamic website option such as WordPress.\n\n\nStatic websites have many advantages over dynamic websites. They are relatively simple to maintain, fast to load and incredibly secure. By creating a website that is not overly reliant upon third party software platforms you remain in total control of your content. You know exactly where every file for the website is, and do not have to worry about your content becoming trapped in a proprietary system or database.\n\n\nWhat is a Static Website Generator?\n\n\nA static website generator is a tool that takes flat files and processes them into the necessary HTML and CSS files to become a website. In the case of Jekyll Academic the majority of the files are written using the Markdown markup language. It is a simplified text markup language that allows you to mimic the features of HTML without needing to know HTML. Jekll is built using the Ruby programming language, it can take the Markdown and sass files that are in the Jekyll Academic directory and process those files, creating a fully functioning website.\n\n\nIs This the Right Type of Site for Me?\n\n\nWhile there are many advantages of using a static website generator to create your professional academic website, it may not be the right tool for everyone. This type of website is best suited for websites consisting mainly of static text content. If you need a site that relies heavily on video and large image galleries this may not be the best option for you. If you are looking for a site to host a CV and showcase some presentations as well as some text based pages (blog or otherwise) it will likely suit your needs.", 
            "title": "About"
        }, 
        {
            "location": "/about/#what-is-jekyll-academic", 
            "text": "Jekyll Academic is a Jekyll template developed by NCSU Libraries tailored specifically for use within the academic community. It is a template for  Jekyll , a static website generator. It's features include the ability to create blog posts, a dedicated resume page, social media integration and the ability to create and host  Reveal.js  presentations. It is also designed to be hosted on GitHub pages. Jekyll Academic allows you to create a well designed, functional and completely free website. Hosting on GitHub pages allows you to keep the website in one place, even if you move between institutions.", 
            "title": "What Is Jekyll Academic"
        }, 
        {
            "location": "/about/#what-is-a-static-website", 
            "text": "Static websites are websites that do not require a database to store and deliver content to site visitors. In some ways static websites are more similar to early websites in that they rely primarily upon HTML and CSS to serve rather simple content to visitors. However, do not let the simplicity imply that they are somehow inferior to a dynamic website option such as WordPress.  Static websites have many advantages over dynamic websites. They are relatively simple to maintain, fast to load and incredibly secure. By creating a website that is not overly reliant upon third party software platforms you remain in total control of your content. You know exactly where every file for the website is, and do not have to worry about your content becoming trapped in a proprietary system or database.", 
            "title": "What is a Static Website?"
        }, 
        {
            "location": "/about/#what-is-a-static-website-generator", 
            "text": "A static website generator is a tool that takes flat files and processes them into the necessary HTML and CSS files to become a website. In the case of Jekyll Academic the majority of the files are written using the Markdown markup language. It is a simplified text markup language that allows you to mimic the features of HTML without needing to know HTML. Jekll is built using the Ruby programming language, it can take the Markdown and sass files that are in the Jekyll Academic directory and process those files, creating a fully functioning website.", 
            "title": "What is a Static Website Generator?"
        }, 
        {
            "location": "/about/#is-this-the-right-type-of-site-for-me", 
            "text": "While there are many advantages of using a static website generator to create your professional academic website, it may not be the right tool for everyone. This type of website is best suited for websites consisting mainly of static text content. If you need a site that relies heavily on video and large image galleries this may not be the best option for you. If you are looking for a site to host a CV and showcase some presentations as well as some text based pages (blog or otherwise) it will likely suit your needs.", 
            "title": "Is This the Right Type of Site for Me?"
        }, 
        {
            "location": "/", 
            "text": "Jekyll Academic Quickstart\n\n\nRequired Software\n\n\nIt is possible to get up and running with a Jekyll Academic website using only your web browser and a GitHub account. Full documentation for \nlocal installation and editing\n can be found on the \nDocumentation \n page.\n\n\nQuickStart\n\n\nThis QuickStart guide is geared to getting you up and running quickly, using only a web browser and GitHub account. Following the directions below will result in you having a Jekyll Academic website hosted on GitHub pages live on the web. Before you begin working through the QuickStart guide you may want to familiarize yourself with the following technologies that will be used to create your Jekyll Academic website:\n\n\n\n\nJekyll\n\n\nMarkdown\n\n\nGitHub\n\n\nGitHub Pages\n\n\n\n\n\n\n1) Register for a GitHub Account\n\n\nSkip this step if you have already setup your GitHub account\n\n\n\n\nIn a web browser, navigate to \nGitHub.com\n\n\nFill Out Username*, Email Address and Password\n\n\nClick Sign up for GitHub button\n\n\nClick the Finish Sign Up button\n\n\n\n\n*Make a note of the username that you create, as you will be required to use it in setting up your GitHub pages repository.\n\n\n2) Verify Email Address\n\n\n\n\nNavigate to the email account you used to sign up\n\n\nVerify your email address by clicking on the \u201cVerify email address\u201d button in the email you received from GitHub\n\n\n\n\n3) Setting Up your Jekyll Academic Repository:\n\n\n\n\nFrom your main profile page in GitHub click on New Repository\n\n\nGive your repository the following name [username].github.io *\n\n\nClick on Create Repository\n\n\nClick on the \nImport Code\n button under the \"...or import code from another repository\" section\n\n\nPaste the following URL in the \u201cYour old repository\u2019s clone URL\" section \nhttps://github.com/NCSU-Libraries/jekyll-academic\n\n\nClick on Begin Import\n\n\nOnce import is complete navigate to [username.github.io] in your web browser\n\n\n\n\n*Note: For for GitHub Pages site to work correctly, the repository name must exactly match the format of [username].github.io. For example if your GitHub username is student1234 your GitHub Pages repository must be named student1234.github.io\n\n\n4) See your Live Website\n\n\n\n\nOpen your web browser and go to [username].github.io\n\n\n\n\n5) Edit Site Files via GitHub Browser Editor\n\n\n\n\nOpen a second web browser tab that shows the files in your repository github.com/[username]/[username].github.io\n\n\nEdit the main settings file for your website to add your name, and to link your accounts\n\n\nClick on the  _config.yml file in your repository to see the contents of that file\n\n\nClick on the \u2018Edit This File\u2019 button\n\n\nEdit the following entries of the _config.yml file\n\n\nTitle\n\n\nName\n\n\nBio\n\n\nEmail (enter your full email address)\n\n\n\n\n\n\nEdit the following entries to provide links to social media platforms by replacing \n#username\n with your actual username on that platform.\n\n\nTwitter\n\n\nFacebook\n\n\nGitHub\n\n\n... etc.\n\n\n\n\n\n\n\n\n6) Commit Changes to GitHub*\n\n\n\n\nAfter making changes to the file, make a note under the \u2018Commit Changes\u2019 section documenting the changes that you made (e.g. Updated social media usernames)\n\n\nClick \u2018Commit changes\u2019\n\n\nRefresh the browser tab that contains your live website ([username].github.io) and confirm that changes were made to your site\n\n\n\n\nNext Steps\n\n\nAfter following the steps above you now have a fully functioning website that others can view online. You can continue to edit other files on the site in the browser following similar steps as above (click into file, edit and commit).\n\n\nFollowing the instructions on the \nDocumentation\n will allow you to set up your computer to edit your files locally. It also offers a full explanation of the site structure, providing detailed instructions for fully customizing your new website.", 
            "title": "Quickstart"
        }, 
        {
            "location": "/#jekyll-academic-quickstart", 
            "text": "", 
            "title": "Jekyll Academic Quickstart"
        }, 
        {
            "location": "/#required-software", 
            "text": "It is possible to get up and running with a Jekyll Academic website using only your web browser and a GitHub account. Full documentation for  local installation and editing  can be found on the  Documentation   page.", 
            "title": "Required Software"
        }, 
        {
            "location": "/#quickstart", 
            "text": "This QuickStart guide is geared to getting you up and running quickly, using only a web browser and GitHub account. Following the directions below will result in you having a Jekyll Academic website hosted on GitHub pages live on the web. Before you begin working through the QuickStart guide you may want to familiarize yourself with the following technologies that will be used to create your Jekyll Academic website:   Jekyll  Markdown  GitHub  GitHub Pages", 
            "title": "QuickStart"
        }, 
        {
            "location": "/#1-register-for-a-github-account", 
            "text": "Skip this step if you have already setup your GitHub account   In a web browser, navigate to  GitHub.com  Fill Out Username*, Email Address and Password  Click Sign up for GitHub button  Click the Finish Sign Up button   *Make a note of the username that you create, as you will be required to use it in setting up your GitHub pages repository.", 
            "title": "1) Register for a GitHub Account"
        }, 
        {
            "location": "/#2-verify-email-address", 
            "text": "Navigate to the email account you used to sign up  Verify your email address by clicking on the \u201cVerify email address\u201d button in the email you received from GitHub", 
            "title": "2) Verify Email Address"
        }, 
        {
            "location": "/#3-setting-up-your-jekyll-academic-repository", 
            "text": "From your main profile page in GitHub click on New Repository  Give your repository the following name [username].github.io *  Click on Create Repository  Click on the  Import Code  button under the \"...or import code from another repository\" section  Paste the following URL in the \u201cYour old repository\u2019s clone URL\" section  https://github.com/NCSU-Libraries/jekyll-academic  Click on Begin Import  Once import is complete navigate to [username.github.io] in your web browser   *Note: For for GitHub Pages site to work correctly, the repository name must exactly match the format of [username].github.io. For example if your GitHub username is student1234 your GitHub Pages repository must be named student1234.github.io", 
            "title": "3) Setting Up your Jekyll Academic Repository:"
        }, 
        {
            "location": "/#4-see-your-live-website", 
            "text": "Open your web browser and go to [username].github.io", 
            "title": "4) See your Live Website"
        }, 
        {
            "location": "/#5-edit-site-files-via-github-browser-editor", 
            "text": "Open a second web browser tab that shows the files in your repository github.com/[username]/[username].github.io  Edit the main settings file for your website to add your name, and to link your accounts  Click on the  _config.yml file in your repository to see the contents of that file  Click on the \u2018Edit This File\u2019 button  Edit the following entries of the _config.yml file  Title  Name  Bio  Email (enter your full email address)    Edit the following entries to provide links to social media platforms by replacing  #username  with your actual username on that platform.  Twitter  Facebook  GitHub  ... etc.", 
            "title": "5) Edit Site Files via GitHub Browser Editor"
        }, 
        {
            "location": "/#6-commit-changes-to-github", 
            "text": "After making changes to the file, make a note under the \u2018Commit Changes\u2019 section documenting the changes that you made (e.g. Updated social media usernames)  Click \u2018Commit changes\u2019  Refresh the browser tab that contains your live website ([username].github.io) and confirm that changes were made to your site", 
            "title": "6) Commit Changes to GitHub*"
        }, 
        {
            "location": "/#next-steps", 
            "text": "After following the steps above you now have a fully functioning website that others can view online. You can continue to edit other files on the site in the browser following similar steps as above (click into file, edit and commit).  Following the instructions on the  Documentation  will allow you to set up your computer to edit your files locally. It also offers a full explanation of the site structure, providing detailed instructions for fully customizing your new website.", 
            "title": "Next Steps"
        }, 
        {
            "location": "/documentation/", 
            "text": "Overview\n\n\nThe following is meant as a more complete set of documentation than the QuickStart guide. If you have not yet completed the QuickStart guide it is recommended that you begin there - as it will provide the necessary steps to setting up your GitHub repository and transferring the source files.\n\n\nSoftware Requirements\n\n\nIn order to edit your Jekyll Academic website locally you will need the following pieces of software:\n\n\nRequired\n\n\n\n\nText Editor (Any text editor will do, our favorite is \nAtom\n)\n\n\nGitHub Desktop\n. This is used to sync files between your local computer and the GitHub repository that is acting as your website host.\n\n\n\n\nOptional\n\n\n\n\n\n\nJekyll\n\n\nNote: If you are intending to use GitHub pages to host Jekyll Academic Sites you do not need to have a local installation of Jekyll, GitHub takes care of that work for you. If you wish to host the site elsewhere, or wish to unlock more powerful features available in Jekyll you may want to consider a local Jekyll installation as well. More detailed instructions can be found on the \nAdvanced Features\n page.\n\n\n\n\n\n\nGitHub Setup\n\n\nConnect your GitHub Repository to GitHub Desktop\n\n\n\n\nDownload GitHub Desktop from https://desktop.github.com/ (skip this step if you already have GitHub Desktop installed)\n\n\nDouble-click on downloaded file to begin the installation\n\n\nWhile on the Welcome screen click on Continue\n\n\nSign in using your GitHub username and password\n\n\nClick Sign In\n\n\nClick Continue\n\n\nClick Continue one more time\n\n\nClick on the plus sign in the upper left-hand corner of the screen to add a repository to Github Desktop\n\n\nClick Clone\n\n\nFind the \n[username].github.io\n repository you created earlier and click Clone Repository\n\n\nSelect the location where you would like to save the local copy of the files from your repository (e.g. Documents)\n\n\nOnce the clone is finished you can click on the name of the repository on the left-hand side of Github Desktop to see any uncommitted changes (there shouldn\u2019t be any yet)\n\n\n\n\nEdit File, Sync Changes\n\n\n\n\nMake changes to one of your website's pages that is now saved in your local filesystem (ex. open resume.md using a text editor and update the information in the file)\n\n\nSave the file you edited\n\n\nOpen GitHub Desktop\n\n\nClick to see Uncommitted Changes (at the top center portion of the screen)\n\n\nAdd commit message to the summary field that says what changes you made\n\n\nClick Commit to Master\n\n\nClick Sync\n\n\nRefresh the browser window with your website ([username].github.io) and check for changes on the page you edited\n\n\n\n\n\n\nImportant Files and Folders\n\n\nIn order to better understand how everything in your site works, there are a few files and folders that you need to be aware of. These files control the main elements of your site, including your logo, bio photo and navigation. Full documentation of the directory structure can be found \nhere\n.\n\n\n\n\n\n\n_config.yml\n - This is your websites main configuration file. It allows you to set a site title, links to your social media accounts as well as a logo and bio photo image.\n\n\n\n\n\n\naccent.scss\n - This file is used to set the colors of your site. The site is set up to accept two colors (highlight, lowlight). The main impact of the color choice  \n\n\n\n\n\n\n_posts\n - This folder holds all of the posts and presentations for your website. There is one sample post file and one sample presentation file located in this directory by default. The easiest way to create a new post or presentation is to simply copy either the post or presentation file and edit the contents.\n\n\n\n\n\n\nimages/bio-photo.jpg\n - This is the photo that appears on the home page of the website. The recommended image size is 200px x 200px.\n\n\n\n\n\n\nimages/logo.png\n - If you wish to use a logo for your site, include logo.png in the images folder. You will also need to add logo.png under the 'Logo:' section of the _config.yml file.\n\n\n\n\n\n\n_data/navigation.yml\n -This is the file that allows you to manage your navigation elements. By default all available navigation items are shown. If you wish to hide any items, simply delete them from this file.\n\n\n\n\n\n\n\n\nAdding Blog posts\n\n\nTo add a new blog post to your site you simply create a new Markdown file by either copying another post file and editing the contents or starting with a blank markdown file. Keep in mind that \nJekyll requires that all posts follow the yyyy-mm-dd-title.md naming convention.\n\n\nIf you wish to begin with a blank markdown file, you must paste the following YAML front matter at the very beginning of your file.\n\n\n---\nlayout: post\ntitle: Add Your Title Here\nexcerpt: \"Add an excerpt here, the excerpt will appear underneath the blog title\"\nmodified: 2016-01-13 20:41:38\ntags: [intro, beginner, jekyll, tutorial]\ncomments: true\ncategory: blog\n---\n\n\n\nThe important thing to note is that you need to make sure that the category is set to 'blog'. This ensures that this post will appear on the blog page. You can then add your blog content using Markdown as your markup language for the rest of the file.\n\n\nAdding Reveal.js Presentations\n\n\nIn Jekyll Academic presentations are actually set up as posts, and live in the same _posts folder as your blog posts. They also must use the same file naming convention as posts (yyyy-mm-dd-title.md). The main difference between a blog post and a Reveal.js presentation is the layout and category used in the YAML front matter.\n\n\nIf you wish to begin your Reveal.js presentation with a blank markdown file, you must paste the following YAML front matter at the very beginning of your file.\n\n\n---\nlayout: slide\ntitle: Add Your Title Here\nexcerpt: \"Add an excerpt here, the excerpt will appear underneath the blog title\"\nmodified: 2016-01-13 20:41:38\ntags: [intro, beginner, jekyll, tutorial]\ncomments: true\ncategory: presentation\n---\n\nsection data-markdown\n\n# Add Reveal.js slide content here, following the Reveal.js format\n\n/section\n\n\n\n\nNote that Reveal.js presentations must use \"slide\" as the layout and \"presentation\" as the category.\n\n\nAdding Links to External Presentations\n\n\nIf you would rather use another service, like Google Presentations for your presentations you can still link to them from your Jekyll Academic website. To do so start a new file in your _posts directory following the same yyyy-mm-dd-title.md file name convention and paste the following YAML front matter into that file.\n\n\n  ---\n  layout: post\n  title: Add Your Title Here\n  excerpt: \"Add an excerpt here, the excerpt will appear underneath the blog title\"\n  modified: 2016-01-13 20:41:38\n  tags: [intro, beginner, jekyll, tutorial]\n  comments: true\n  category: presentation\n  ---\n  # Title of Presentation\n  ## SubTitle of Presentation\n  [Text for Link](html link to presentation)\n\n\n\nIn the above example you are using the 'post' layout, but giving it a 'presentation' category. This means it will give you a blank post page, but will appear under your list of presentations. The content on this page can be anything, but you will need to at least add a link to wherever your presentation is located.\n\n\n\n\nAdding or Removing Navigation Items\n\n\nYou may want to add additional navigation items that point to different types of content or individual pages. This can be accomplished by adding a new navigation item. In order to add a new navigation item you will:\n\n\n1) Copy the folder of an existing navigation item (e.g resume) and paste it into the root directory of your project. Rename this folder with the name of the new navigation item.\n\n\n2) Navigate to _data/navigation.yml and add a new navigation item by copying the layout of an existing navigation item.\n\n\n3) Take a look at some of the existing index.md files for other navigation items. Take note of the 'layout' element declared in the frontmatter. This will help you determine which layout is appropriate for your newly created page (e.g. Page or Resume)\n\n\n\n\nUnderstanding Layouts\n\n\nOne of the fundamental elements of Jekyll is the ability to utilize different layouts for different types of pages. The layouts are found in the _layouts folder. These are .html files that drive the layout of any particular page. For example the 'slide' layout contains all of the necessary includes to power Reveal.js slides. The current available layouts in Jekyll Academic are:\n\n\n\n\nhome - This layout is the layout for the homepage of your website. It automatically includes your 5 most recent blog posts in the space to the right of the social media section.\n\n\npage - This layout is used for any individual page, like the 'About Me' page. It is a blank page that can be formatted using Markdown.\n\n\npost-index - This layout is used on the blog archive. It lists every blog post chronologically separated by year.\n\n\npost - This layout is used for blog posts. It includes a few more functionality elements than the 'page' layout.\n\n\nresume - This layout is used for the Resume page.\n\n\npresentation-post-index - This layout is identical to the post-index layout except it is used on the presentations index to post all presentations you have on your site in one location, chronologically.\nslide - This layout is used for creating a Reveal.js slide deck.", 
            "title": "Documentation"
        }, 
        {
            "location": "/documentation/#overview", 
            "text": "The following is meant as a more complete set of documentation than the QuickStart guide. If you have not yet completed the QuickStart guide it is recommended that you begin there - as it will provide the necessary steps to setting up your GitHub repository and transferring the source files.", 
            "title": "Overview"
        }, 
        {
            "location": "/documentation/#software-requirements", 
            "text": "In order to edit your Jekyll Academic website locally you will need the following pieces of software:", 
            "title": "Software Requirements"
        }, 
        {
            "location": "/documentation/#required", 
            "text": "Text Editor (Any text editor will do, our favorite is  Atom )  GitHub Desktop . This is used to sync files between your local computer and the GitHub repository that is acting as your website host.", 
            "title": "Required"
        }, 
        {
            "location": "/documentation/#optional", 
            "text": "Jekyll  Note: If you are intending to use GitHub pages to host Jekyll Academic Sites you do not need to have a local installation of Jekyll, GitHub takes care of that work for you. If you wish to host the site elsewhere, or wish to unlock more powerful features available in Jekyll you may want to consider a local Jekyll installation as well. More detailed instructions can be found on the  Advanced Features  page.", 
            "title": "Optional"
        }, 
        {
            "location": "/documentation/#github-setup", 
            "text": "", 
            "title": "GitHub Setup"
        }, 
        {
            "location": "/documentation/#connect-your-github-repository-to-github-desktop", 
            "text": "Download GitHub Desktop from https://desktop.github.com/ (skip this step if you already have GitHub Desktop installed)  Double-click on downloaded file to begin the installation  While on the Welcome screen click on Continue  Sign in using your GitHub username and password  Click Sign In  Click Continue  Click Continue one more time  Click on the plus sign in the upper left-hand corner of the screen to add a repository to Github Desktop  Click Clone  Find the  [username].github.io  repository you created earlier and click Clone Repository  Select the location where you would like to save the local copy of the files from your repository (e.g. Documents)  Once the clone is finished you can click on the name of the repository on the left-hand side of Github Desktop to see any uncommitted changes (there shouldn\u2019t be any yet)", 
            "title": "Connect your GitHub Repository to GitHub Desktop"
        }, 
        {
            "location": "/documentation/#edit-file-sync-changes", 
            "text": "Make changes to one of your website's pages that is now saved in your local filesystem (ex. open resume.md using a text editor and update the information in the file)  Save the file you edited  Open GitHub Desktop  Click to see Uncommitted Changes (at the top center portion of the screen)  Add commit message to the summary field that says what changes you made  Click Commit to Master  Click Sync  Refresh the browser window with your website ([username].github.io) and check for changes on the page you edited", 
            "title": "Edit File, Sync Changes"
        }, 
        {
            "location": "/documentation/#important-files-and-folders", 
            "text": "In order to better understand how everything in your site works, there are a few files and folders that you need to be aware of. These files control the main elements of your site, including your logo, bio photo and navigation. Full documentation of the directory structure can be found  here .    _config.yml  - This is your websites main configuration file. It allows you to set a site title, links to your social media accounts as well as a logo and bio photo image.    accent.scss  - This file is used to set the colors of your site. The site is set up to accept two colors (highlight, lowlight). The main impact of the color choice      _posts  - This folder holds all of the posts and presentations for your website. There is one sample post file and one sample presentation file located in this directory by default. The easiest way to create a new post or presentation is to simply copy either the post or presentation file and edit the contents.    images/bio-photo.jpg  - This is the photo that appears on the home page of the website. The recommended image size is 200px x 200px.    images/logo.png  - If you wish to use a logo for your site, include logo.png in the images folder. You will also need to add logo.png under the 'Logo:' section of the _config.yml file.    _data/navigation.yml  -This is the file that allows you to manage your navigation elements. By default all available navigation items are shown. If you wish to hide any items, simply delete them from this file.", 
            "title": "Important Files and Folders"
        }, 
        {
            "location": "/documentation/#adding-blog-posts", 
            "text": "To add a new blog post to your site you simply create a new Markdown file by either copying another post file and editing the contents or starting with a blank markdown file. Keep in mind that  Jekyll requires that all posts follow the yyyy-mm-dd-title.md naming convention.  If you wish to begin with a blank markdown file, you must paste the following YAML front matter at the very beginning of your file.  ---\nlayout: post\ntitle: Add Your Title Here\nexcerpt: \"Add an excerpt here, the excerpt will appear underneath the blog title\"\nmodified: 2016-01-13 20:41:38\ntags: [intro, beginner, jekyll, tutorial]\ncomments: true\ncategory: blog\n---  The important thing to note is that you need to make sure that the category is set to 'blog'. This ensures that this post will appear on the blog page. You can then add your blog content using Markdown as your markup language for the rest of the file.", 
            "title": "Adding Blog posts"
        }, 
        {
            "location": "/documentation/#adding-revealjs-presentations", 
            "text": "In Jekyll Academic presentations are actually set up as posts, and live in the same _posts folder as your blog posts. They also must use the same file naming convention as posts (yyyy-mm-dd-title.md). The main difference between a blog post and a Reveal.js presentation is the layout and category used in the YAML front matter.  If you wish to begin your Reveal.js presentation with a blank markdown file, you must paste the following YAML front matter at the very beginning of your file.  ---\nlayout: slide\ntitle: Add Your Title Here\nexcerpt: \"Add an excerpt here, the excerpt will appear underneath the blog title\"\nmodified: 2016-01-13 20:41:38\ntags: [intro, beginner, jekyll, tutorial]\ncomments: true\ncategory: presentation\n--- section data-markdown \n# Add Reveal.js slide content here, following the Reveal.js format /section   Note that Reveal.js presentations must use \"slide\" as the layout and \"presentation\" as the category.", 
            "title": "Adding Reveal.js Presentations"
        }, 
        {
            "location": "/documentation/#adding-links-to-external-presentations", 
            "text": "If you would rather use another service, like Google Presentations for your presentations you can still link to them from your Jekyll Academic website. To do so start a new file in your _posts directory following the same yyyy-mm-dd-title.md file name convention and paste the following YAML front matter into that file.    ---\n  layout: post\n  title: Add Your Title Here\n  excerpt: \"Add an excerpt here, the excerpt will appear underneath the blog title\"\n  modified: 2016-01-13 20:41:38\n  tags: [intro, beginner, jekyll, tutorial]\n  comments: true\n  category: presentation\n  ---\n  # Title of Presentation\n  ## SubTitle of Presentation\n  [Text for Link](html link to presentation)  In the above example you are using the 'post' layout, but giving it a 'presentation' category. This means it will give you a blank post page, but will appear under your list of presentations. The content on this page can be anything, but you will need to at least add a link to wherever your presentation is located.", 
            "title": "Adding Links to External Presentations"
        }, 
        {
            "location": "/documentation/#adding-or-removing-navigation-items", 
            "text": "You may want to add additional navigation items that point to different types of content or individual pages. This can be accomplished by adding a new navigation item. In order to add a new navigation item you will:  1) Copy the folder of an existing navigation item (e.g resume) and paste it into the root directory of your project. Rename this folder with the name of the new navigation item.  2) Navigate to _data/navigation.yml and add a new navigation item by copying the layout of an existing navigation item.  3) Take a look at some of the existing index.md files for other navigation items. Take note of the 'layout' element declared in the frontmatter. This will help you determine which layout is appropriate for your newly created page (e.g. Page or Resume)", 
            "title": "Adding or Removing Navigation Items"
        }, 
        {
            "location": "/documentation/#understanding-layouts", 
            "text": "One of the fundamental elements of Jekyll is the ability to utilize different layouts for different types of pages. The layouts are found in the _layouts folder. These are .html files that drive the layout of any particular page. For example the 'slide' layout contains all of the necessary includes to power Reveal.js slides. The current available layouts in Jekyll Academic are:   home - This layout is the layout for the homepage of your website. It automatically includes your 5 most recent blog posts in the space to the right of the social media section.  page - This layout is used for any individual page, like the 'About Me' page. It is a blank page that can be formatted using Markdown.  post-index - This layout is used on the blog archive. It lists every blog post chronologically separated by year.  post - This layout is used for blog posts. It includes a few more functionality elements than the 'page' layout.  resume - This layout is used for the Resume page.  presentation-post-index - This layout is identical to the post-index layout except it is used on the presentations index to post all presentations you have on your site in one location, chronologically.\nslide - This layout is used for creating a Reveal.js slide deck.", 
            "title": "Understanding Layouts"
        }, 
        {
            "location": "/advanced/", 
            "text": "Advanced Features\n\n\nThe quickstart guide was intended to provide you with the easiest possible setup of Jekyll Academic. The integration with GitHub Pages allows you to fully set up Jekyll Academic without ever installing Jekyll locally. However, many users may wish to make advanced modifications to their site. If you wish to do so, you would benefit from installing Jekyll locally. The following instructions are based on using Mac OSX as your operating system.\n\n\nSetting Up Jekyll Locally\n\n\nGitHub Pages has been designed to work with Jekyll allowing you to upload your 'raw' site files and have GitHub interpret them and create your site. This works well for any user that wants to use GitHub Pages. However, there are additional features that can be utilized if you wish to install Jekyll locally. Local installation allows you to preview the changes made to your site without committing them to GitHub. It also allows you to create new posts from the command line.\n\n\nTo set up Jekyll locally you will need to install the following three things:\n\n\n\n\nRuby\n\n\nRubyGems\n\n\nJekyll\n\n\n\n\nInstalling Ruby\n\n\nProbably the easiest way to install Ruby on a Mac is using \nHomebrew\n. Once you have Homebrew installed you can install ruby using the command \nbrew install ruby\n. If you are using another operating system, or wish to have a more advanced ruby setup, you may find the instructions listed \nhere\n useful. After installing ruby on your system you will need to install \nRubyGems\n this can be completed by following the instructions on the \nRubyGems\n website.\n\n\nInstalling Jekyll\n\n\nJekyll can be installed using RubyGems once you have ruby and RubyGems installed you can install Jekyll using the command \ngem install jekyll\n.\n\n\nUsing Jekyll Locally\n\n\nJekyll is an incredibly powerful tool. It also has a ton of great documentation written about it already that can be found at the \nJekyll\n website. We highly recommend you take a look at that site to get a better idea of the advanced features that are available. Two of the most common Jekyll commands are described below.\n\n\n\n\n\n\nJekyll Serve\n - The primary advantage of installing Jekyll locally is that it allows you to make updates to your site and preview those changes before pushing them to GitHub. In order to view changes that you are making to your site in a preview development server run \njekyll serve\n from your project directory and then navigate to http://localhost:4000/.\n\n\n\n\n\n\nJekyll Build\n - If you wish to host your website somewhere other than GitHub Pages it will require that you create a site folder containing valid HTML and CSS files. You can do this by running \njekyll build\n from the root folder of your project directory. That will result in the creation of a _site folder. That folder can then be uploaded to the webhost of your choosing.\n\n\n\n\n\n\n\n\nSite Structure\n\n\nWe have provided a rudimentary file tree to help you navigate the basic file structure of your site. It is broken down into three risk levels (low, medium, high).\n\n\n\n\nLow risk\n files are ones that you will need to edit in order to update the basic text on your site, but editing them will not cause any damage to site functionality.\n\n\nMedium risk\n files contain HTML layout files and CSS files. You may find a need to edit these files to update the look and layout of your site. However, this is considered a more advanced task, breaking these files could cause your site layout to break.\n\n\nHigh risk\n files are the files used by Jekyll to provide basic functionality to the site, it is unlikely that you will need to edit these files, and doing so could cause your site to stop functioning.\n\n\n\n\n      ---------------------------------------------------\n      Low Risk:\n      \u251c\u2500\u2500 index.md\n      \u251c\u2500\u2500 resume.md\n      \u251c\u2500\u2500 _config.yml\n      \u251c\u2500\u2500 accent.scss\n      |\n      |\n      \u251c\u2500\u2500 _posts\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 2016-07-22-example-presentation.md\n      \u2502\u00a0\u00a0 \u2514\u2500\u2500 2016-07-23-example-post.md\n      |\n      |\n      \u251c\u2500\u2500 images\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 bio-photo.jpg\n      \u2502\u00a0\u00a0 \u2514\u2500\u2500 logo.png\n      \u251c\u2500\u2500 _data\n      \u2502\u00a0\u00a0 \u2514\u2500\u2500\u2500\u2500\u2500\u2500 navigation.yml\n      ---------------------------------------------------\n      Medium Risk:\n      \u251c\u2500\u2500 _sass\n      \u2502\u00a0\u00a0     \n      \u251c\u2500\u2500 _includes\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 _author-bio.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 _browser-upgrade.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 _cvhead.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 _disqus_comments.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 _feed-footer.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 _footer.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 _head.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 _navigation.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 _open-graph.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 _scripts.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 _social-share.html\n      \u2502\u00a0\u00a0 \u2514\u2500\u2500 _toc.html\n      \u251c\u2500\u2500 _layouts\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 home.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 page.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 post-index.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 post.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 presentation-post-index.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 resume.html\n      \u2502\u00a0\u00a0 \u2514\u2500\u2500 slide.html\n      \u251c\u2500\u2500 assets\u00a0\n      \u2502\u00a0\n      ---------------------------------------------------\n      High Risk:\n      \u251c\u2500\u2500 favicon.png\n      \u251c\u2500\u2500 presentations.md\n      \u251c\u2500\u2500 blog.md\n      \u251c\u2500\u2500 404.md\n      \u251c\u2500\u2500 Gemfile\n      \u251c\u2500\u2500 Gemfile.lock\n      \u251c\u2500\u2500 Gruntfile.js\n      \u251c\u2500\u2500 LICENSE\n      \u251c\u2500\u2500 README.md", 
            "title": "Advanced Features"
        }, 
        {
            "location": "/advanced/#advanced-features", 
            "text": "The quickstart guide was intended to provide you with the easiest possible setup of Jekyll Academic. The integration with GitHub Pages allows you to fully set up Jekyll Academic without ever installing Jekyll locally. However, many users may wish to make advanced modifications to their site. If you wish to do so, you would benefit from installing Jekyll locally. The following instructions are based on using Mac OSX as your operating system.", 
            "title": "Advanced Features"
        }, 
        {
            "location": "/advanced/#setting-up-jekyll-locally", 
            "text": "GitHub Pages has been designed to work with Jekyll allowing you to upload your 'raw' site files and have GitHub interpret them and create your site. This works well for any user that wants to use GitHub Pages. However, there are additional features that can be utilized if you wish to install Jekyll locally. Local installation allows you to preview the changes made to your site without committing them to GitHub. It also allows you to create new posts from the command line.  To set up Jekyll locally you will need to install the following three things:   Ruby  RubyGems  Jekyll", 
            "title": "Setting Up Jekyll Locally"
        }, 
        {
            "location": "/advanced/#installing-ruby", 
            "text": "Probably the easiest way to install Ruby on a Mac is using  Homebrew . Once you have Homebrew installed you can install ruby using the command  brew install ruby . If you are using another operating system, or wish to have a more advanced ruby setup, you may find the instructions listed  here  useful. After installing ruby on your system you will need to install  RubyGems  this can be completed by following the instructions on the  RubyGems  website.", 
            "title": "Installing Ruby"
        }, 
        {
            "location": "/advanced/#installing-jekyll", 
            "text": "Jekyll can be installed using RubyGems once you have ruby and RubyGems installed you can install Jekyll using the command  gem install jekyll .", 
            "title": "Installing Jekyll"
        }, 
        {
            "location": "/advanced/#using-jekyll-locally", 
            "text": "Jekyll is an incredibly powerful tool. It also has a ton of great documentation written about it already that can be found at the  Jekyll  website. We highly recommend you take a look at that site to get a better idea of the advanced features that are available. Two of the most common Jekyll commands are described below.    Jekyll Serve  - The primary advantage of installing Jekyll locally is that it allows you to make updates to your site and preview those changes before pushing them to GitHub. In order to view changes that you are making to your site in a preview development server run  jekyll serve  from your project directory and then navigate to http://localhost:4000/.    Jekyll Build  - If you wish to host your website somewhere other than GitHub Pages it will require that you create a site folder containing valid HTML and CSS files. You can do this by running  jekyll build  from the root folder of your project directory. That will result in the creation of a _site folder. That folder can then be uploaded to the webhost of your choosing.", 
            "title": "Using Jekyll Locally"
        }, 
        {
            "location": "/advanced/#site-structure", 
            "text": "We have provided a rudimentary file tree to help you navigate the basic file structure of your site. It is broken down into three risk levels (low, medium, high).   Low risk  files are ones that you will need to edit in order to update the basic text on your site, but editing them will not cause any damage to site functionality.  Medium risk  files contain HTML layout files and CSS files. You may find a need to edit these files to update the look and layout of your site. However, this is considered a more advanced task, breaking these files could cause your site layout to break.  High risk  files are the files used by Jekyll to provide basic functionality to the site, it is unlikely that you will need to edit these files, and doing so could cause your site to stop functioning.         ---------------------------------------------------\n      Low Risk:\n      \u251c\u2500\u2500 index.md\n      \u251c\u2500\u2500 resume.md\n      \u251c\u2500\u2500 _config.yml\n      \u251c\u2500\u2500 accent.scss\n      |\n      |\n      \u251c\u2500\u2500 _posts\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 2016-07-22-example-presentation.md\n      \u2502\u00a0\u00a0 \u2514\u2500\u2500 2016-07-23-example-post.md\n      |\n      |\n      \u251c\u2500\u2500 images\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 bio-photo.jpg\n      \u2502\u00a0\u00a0 \u2514\u2500\u2500 logo.png\n      \u251c\u2500\u2500 _data\n      \u2502\u00a0\u00a0 \u2514\u2500\u2500\u2500\u2500\u2500\u2500 navigation.yml\n      ---------------------------------------------------\n      Medium Risk:\n      \u251c\u2500\u2500 _sass\n      \u2502\u00a0\u00a0     \n      \u251c\u2500\u2500 _includes\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 _author-bio.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 _browser-upgrade.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 _cvhead.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 _disqus_comments.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 _feed-footer.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 _footer.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 _head.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 _navigation.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 _open-graph.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 _scripts.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 _social-share.html\n      \u2502\u00a0\u00a0 \u2514\u2500\u2500 _toc.html\n      \u251c\u2500\u2500 _layouts\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 home.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 page.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 post-index.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 post.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 presentation-post-index.html\n      \u2502\u00a0\u00a0 \u251c\u2500\u2500 resume.html\n      \u2502\u00a0\u00a0 \u2514\u2500\u2500 slide.html\n      \u251c\u2500\u2500 assets\u00a0\n      \u2502\u00a0\n      ---------------------------------------------------\n      High Risk:\n      \u251c\u2500\u2500 favicon.png\n      \u251c\u2500\u2500 presentations.md\n      \u251c\u2500\u2500 blog.md\n      \u251c\u2500\u2500 404.md\n      \u251c\u2500\u2500 Gemfile\n      \u251c\u2500\u2500 Gemfile.lock\n      \u251c\u2500\u2500 Gruntfile.js\n      \u251c\u2500\u2500 LICENSE\n      \u251c\u2500\u2500 README.md", 
            "title": "Site Structure"
        }, 
        {
            "location": "/resources/", 
            "text": "Additional Resources\n\n\nJekyll\n\n\nJekyll describes itself as a 'Blog aware static website generator'. It is written in the Ruby programming language and is a very powerful tool that creates static websites. The Jekyll Academic theme and getting started guide is limited in its use of Jekyll features. We recommend visiting \nhttps://jekyllrb.com/\n to learn more about all of the features of Jekyll.\n\n\nMinimal Mistakes\n\n\nJekyll Academic is largely based on the \nMinimal Mistakes\n Jekyll theme developed by Michael Rose. This theme is highly customizable, responsive and completely free to use and modify. To learn more about the theme, as well as more in depth editing instructions please visit the \nMinimal Mistakes Getting Started Guide\n.\n\n\nMarkdown\n\n\nMarkdown is a lightweight yet powerful text markup language developed by John Gruber. To learn more about how to use Markdown please visit the Markdown Tutorial on his website.\n\n\nGitHub Pages\n\n\nGitHub Pages\n provides a free hosting platform for personal or project websites. It is tightly integrated with Jekyll to provide a seamless hosting solution for Jekyll based websites.", 
            "title": "Additional Resources"
        }, 
        {
            "location": "/resources/#additional-resources", 
            "text": "", 
            "title": "Additional Resources"
        }, 
        {
            "location": "/resources/#jekyll", 
            "text": "Jekyll describes itself as a 'Blog aware static website generator'. It is written in the Ruby programming language and is a very powerful tool that creates static websites. The Jekyll Academic theme and getting started guide is limited in its use of Jekyll features. We recommend visiting  https://jekyllrb.com/  to learn more about all of the features of Jekyll.", 
            "title": "Jekyll"
        }, 
        {
            "location": "/resources/#minimal-mistakes", 
            "text": "Jekyll Academic is largely based on the  Minimal Mistakes  Jekyll theme developed by Michael Rose. This theme is highly customizable, responsive and completely free to use and modify. To learn more about the theme, as well as more in depth editing instructions please visit the  Minimal Mistakes Getting Started Guide .", 
            "title": "Minimal Mistakes"
        }, 
        {
            "location": "/resources/#markdown", 
            "text": "Markdown is a lightweight yet powerful text markup language developed by John Gruber. To learn more about how to use Markdown please visit the Markdown Tutorial on his website.", 
            "title": "Markdown"
        }, 
        {
            "location": "/resources/#github-pages", 
            "text": "GitHub Pages  provides a free hosting platform for personal or project websites. It is tightly integrated with Jekyll to provide a seamless hosting solution for Jekyll based websites.", 
            "title": "GitHub Pages"
        }, 
        {
            "location": "/workshop/", 
            "text": "Jekyll Academic Workshop\n\n\nThis workshop is designed to be flexible, allowing for it to be taught in a variety of lengths based on how much time is available. Each of the workshop sections is designed to take roughly 30 minutes to complete. They increase in technical difficulty as they progress. The first section is taught entirely in a web browser, so no additional installation of software is required. Section two of the workshop requires the installation of Github Desktop as well as a text editor. Section three of the workshop is more of an in-depth discussion of additional ways to take advantage of advanced features in Jekyll, Github and with the Jekyll Academic theme.  \n\n\nPutting on a Workshop\n\n\nWorkshop Materials\n\n\nWe have published a set of workshop materials that you are free to use, should you choose to teach this workshop. They are available via Google Drive. The materials include a Google Presentation and four activity documents. These documents are also embedded below.\n\n\nTiming\n\n\n\n\nIntro and Overview: 10 Minutes\n\n\nMarkdown Activity (web based): 5 Minutes\n\n\nGitHub First Steps: 10 Minutes\n\n\nEditing Your New Website in a Browser: 10 Minutes\n\n\nBreak: 10 Minutes\n\n\nGitHub Desktop First Steps: 10 Minutes\n\n\nEditing Your New Website: 20 Minutes\n\n\nAdvanced Features: 10 Minutes\n\n\nQuestions: 5 Minutes\n\n\n\n\nActivities\n\n\nGitHub First Steps Activity\n\n\n\n\nEditing Your New Website in a Browser Activity\n\n\n\n\n\nGithub Desktop First Steps Activity\n\n\n\n\nEditing Your New Website in a Browser", 
            "title": "Workshop"
        }, 
        {
            "location": "/workshop/#jekyll-academic-workshop", 
            "text": "This workshop is designed to be flexible, allowing for it to be taught in a variety of lengths based on how much time is available. Each of the workshop sections is designed to take roughly 30 minutes to complete. They increase in technical difficulty as they progress. The first section is taught entirely in a web browser, so no additional installation of software is required. Section two of the workshop requires the installation of Github Desktop as well as a text editor. Section three of the workshop is more of an in-depth discussion of additional ways to take advantage of advanced features in Jekyll, Github and with the Jekyll Academic theme.", 
            "title": "Jekyll Academic Workshop"
        }, 
        {
            "location": "/workshop/#putting-on-a-workshop", 
            "text": "", 
            "title": "Putting on a Workshop"
        }, 
        {
            "location": "/workshop/#workshop-materials", 
            "text": "We have published a set of workshop materials that you are free to use, should you choose to teach this workshop. They are available via Google Drive. The materials include a Google Presentation and four activity documents. These documents are also embedded below.", 
            "title": "Workshop Materials"
        }, 
        {
            "location": "/workshop/#timing", 
            "text": "Intro and Overview: 10 Minutes  Markdown Activity (web based): 5 Minutes  GitHub First Steps: 10 Minutes  Editing Your New Website in a Browser: 10 Minutes  Break: 10 Minutes  GitHub Desktop First Steps: 10 Minutes  Editing Your New Website: 20 Minutes  Advanced Features: 10 Minutes  Questions: 5 Minutes", 
            "title": "Timing"
        }, 
        {
            "location": "/workshop/#activities", 
            "text": "", 
            "title": "Activities"
        }, 
        {
            "location": "/workshop/#github-first-steps-activity", 
            "text": "", 
            "title": "GitHub First Steps Activity"
        }, 
        {
            "location": "/workshop/#editing-your-new-website-in-a-browser-activity", 
            "text": "", 
            "title": "Editing Your New Website in a Browser Activity"
        }, 
        {
            "location": "/workshop/#github-desktop-first-steps-activity", 
            "text": "", 
            "title": "Github Desktop First Steps Activity"
        }, 
        {
            "location": "/workshop/#editing-your-new-website-in-a-browser", 
            "text": "", 
            "title": "Editing Your New Website in a Browser"
        }
    ]
}